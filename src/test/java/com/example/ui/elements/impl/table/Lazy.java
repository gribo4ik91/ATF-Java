package com.example.ui.elements.impl.table;

import java.util.function.Supplier;

/**
 * Реализует ленивую инициализацию объекта;
 * Создаёт объект при первом вызове `get()` и кэширует его;
 * Используется для отложенного создания ресурсоёмких объектов.
 *
 * <p>Класс `Lazy<T>` — универсальный обёртка-контейнер, реализующий паттерн "ленивая инициализация".
 * Объект создаётся только один раз — при первом вызове метода `get()`, после чего повторно возвращается кэшированное значение.
 * Подходит для оптимизации загрузки тяжёлых элементов (например, таблиц, списков, секций и т.п.).</p>
 *
 * @param <T> тип объекта, который должен быть создан "по требованию"
 */
public class Lazy<T> {

    // Фабрика/поставщик, отвечающий за создание объекта при первом запросе
    private final Supplier<T> supplier;

    // Закэшированное значение после первого вызова
    private T instance;

    /**
     * Конструктор ленивого контейнера.
     *
     * @param supplier функция, которая создаёт объект при первом обращении
     */
    public Lazy(Supplier<T> supplier) {
        this.supplier = supplier;
    }

    /**
     * Возвращает объект, создавая его только при первом вызове.
     * При последующих вызовах возвращает уже созданный экземпляр.
     *
     * @return объект типа T
     */
    public T get() {
        if (instance == null) {
            instance = supplier.get();
        }
        return instance;
    }
}
